{"version":3,"sources":["components/InputComponents/TextInput.tsx","components/InputComponents/SelectInput.tsx","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TextInput","memo","name","label","inputValue","errorMessage","placeholder","onChange","className","htmlFor","type","id","classNames","value","SelectInput","options","map","option","TodoList","todos","onSelect","useState","title","setTitle","selectedOption","setSelectedOption","filteredTodos","useMemo","filter","todo","toLowerCase","includes","completed","event","target","checked","readOnly","userId","onClick","CurrentUser","onClearSelection","user","setUser","useEffect","fetch","then","response","json","person","email","phone","App","selectedUserId","setSelectedUserId","setTodos","selectUser","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a627ae0.chunk.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  name: string,\n  label: string,\n  inputValue: string,\n  errorMessage: string,\n  placeholder: string,\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const TextInput: FC<Props> = memo(({\n  name, label, inputValue, errorMessage, placeholder, onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label htmlFor={name} className=\"label\">\n        {label}\n        <div className=\"control\">\n          <input\n            type=\"text\"\n            name={name}\n            id={name}\n            placeholder={placeholder}\n            className={classNames('input', { 'is-danger': errorMessage })}\n            value={inputValue}\n            onChange={onChange}\n          />\n        </div>\n      </label>\n      {errorMessage && (<p className=\"help is-danger\">{errorMessage}</p>)}\n    </div>\n  );\n});\n","import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\n\ninterface Option {\n  id: number,\n  name: string,\n}\n\ninterface Props {\n  name: string,\n  label: string,\n  inputValue: string,\n  errorMessage: string,\n  options: Option[],\n  onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\nexport const SelectInput: FC<Props> = memo(({\n  name, label, inputValue, errorMessage, options, onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label htmlFor=\"todo\" className=\"label\">\n        {label}\n        <div className=\"control\">\n          <div className={classNames('select', { 'is-danger': errorMessage })}>\n            <select\n              id={name}\n              name={name}\n              value={inputValue}\n              onChange={onChange}\n            >\n              {options.map(option => (\n                <option key={option.id} value={option.name}>\n                  {option.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </label>\n      {errorMessage && (<p className=\"help is-danger\">{errorMessage}</p>)}\n    </div>\n  );\n});\n","import React, { memo, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport { TextInput } from '../InputComponents/TextInput';\nimport { SelectInput } from '../InputComponents/SelectInput';\n\ninterface Props {\n  todos: Todo[],\n  id: number,\n  onSelect: (id: number) => void,\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos, id, onSelect,\n}) => {\n  const [title, setTitle] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedOption(event.target.value);\n  };\n\n  const options = [\n    { id: 1, name: 'all' },\n    { id: 2, name: 'active' },\n    { id: 3, name: 'completed' },\n  ];\n\n  const filteredTodos = useMemo(() => (\n    todos\n      .filter(todo => todo.title.toLowerCase().includes(title.toLowerCase()))\n      .filter(todo => {\n        switch (selectedOption) {\n          case 'active':\n            return todo.completed === false;\n          case 'completed':\n            return todo.completed === true;\n          case 'all':\n          default:\n            return todo;\n        }\n      })\n  ), [todos, title, selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2 className=\"title\">Todos:</h2>\n\n      <TextInput\n        name=\"title\"\n        label=\"\"\n        inputValue={title}\n        errorMessage=\"\"\n        placeholder=\"Search by title\"\n        onChange={handleInputChange}\n      />\n\n      <SelectInput\n        name=\"filter\"\n        label=\"\"\n        inputValue={selectedOption}\n        errorMessage=\"\"\n        options={options}\n        onChange={handleSelectChange}\n      />\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  { 'TodoList__user-button--selected': todo.userId === id },\n                )}\n                type=\"button\"\n                onClick={() => onSelect(todo.userId)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","export function getTodos(): Promise<Todo[]> {\n  return fetch('https://mate.academy/students-api/todos')\n    .then(response => response.json());\n}\n\nexport const getUser = (userId: number): Promise<User> => {\n  return fetch(`https://mate.academy/students-api/users/${userId}`)\n    .then(response => response.json());\n};\n","import React, { memo, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  id: number,\n  onClearSelection: (id: number) => void\n}\n\nexport const CurrentUser: React.FC<Props> = memo(({ id, onClearSelection }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(id)\n      .then(person => setUser(person));\n  }, [id]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear\"\n        onClick={() => onClearSelection(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport 'bulma';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          id={selectedUserId}\n          onSelect={selectUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              id={selectedUserId}\n              onClearSelection={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}