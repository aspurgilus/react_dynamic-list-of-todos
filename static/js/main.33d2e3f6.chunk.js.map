{"version":3,"sources":["components/Form/InputComponents/SelectInput.tsx","components/Form/InputComponents/TextInput.tsx","components/Form/FormSection.tsx","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SelectInput","memo","name","label","inputValue","errorMessage","options","onChange","className","htmlFor","classNames","id","value","map","option","TextInput","placeholder","type","FormSection","onFilter","useState","title","setTitle","selected","setSelected","onSubmit","event","preventDefault","target","TodoList","todos","onSelect","todo","completed","checked","readOnly","userId","onClick","CurrentUser","onClearSelection","user","setUser","useEffect","fetch","then","response","json","person","email","phone","App","selectedUserId","setSelectedUserId","setTodos","filteredTodos","setFilteredTodos","filterTodos","useCallback","source","filter","includes","selectUser","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33d2e3f6.chunk.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\n\ninterface Option {\n  id: number,\n  name: string,\n}\n\ninterface Props {\n  name: string,\n  label: string,\n  inputValue: string,\n  errorMessage: string,\n  options: Option[],\n  onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\nexport const SelectInput: FC<Props> = memo(({\n  name, label, inputValue, errorMessage, options, onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label htmlFor=\"todo\" className=\"label\">\n        {label}\n        <div className=\"control\">\n          <div className={classNames('select', { 'is-danger': errorMessage })}>\n            <select\n              id={name}\n              name={name}\n              value={inputValue}\n              onChange={onChange}\n            >\n              {options.map(option => (\n                <option key={option.id} value={option.name}>\n                  {option.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </label>\n      {errorMessage && (<p className=\"help is-danger\">{errorMessage}</p>)}\n    </div>\n  );\n});\n","import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  name: string,\n  label: string,\n  inputValue: string,\n  errorMessage: string,\n  placeholder: string,\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const TextInput: FC<Props> = memo(({\n  name, label, inputValue, errorMessage, placeholder, onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label htmlFor={name} className=\"label\">\n        {label}\n        <div className=\"control\">\n          <input\n            type=\"text\"\n            name={name}\n            id={name}\n            placeholder={placeholder}\n            className={classNames('input', { 'is-danger': errorMessage })}\n            value={inputValue}\n            onChange={onChange}\n          />\n        </div>\n      </label>\n      {errorMessage && (<p className=\"help is-danger\">{errorMessage}</p>)}\n    </div>\n  );\n});\n","import { FC, memo, useState } from 'react';\nimport { SelectInput } from './InputComponents/SelectInput';\nimport { TextInput } from './InputComponents/TextInput';\nimport './form.scss';\n\ninterface Props {\n  onFilter: (source: string, value: string) => void\n}\n\nexport const FormSection: FC<Props> = memo(({ onFilter }) => {\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n  };\n\n  const [title, setTitle] = useState('');\n  const [selected, setSelected] = useState('all');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setSelected('all');\n    onFilter('input', event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelected(event.target.value);\n    setTitle('');\n    onFilter('select', event.target.value);\n  };\n\n  const options = [\n    { id: 1, name: 'all' },\n    { id: 2, name: 'active' },\n    { id: 3, name: 'completed' },\n  ];\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form\">\n      <TextInput\n        name=\"title\"\n        label=\"\"\n        inputValue={title}\n        errorMessage=\"\"\n        placeholder=\"Search by title\"\n        onChange={handleInputChange}\n      />\n\n      <SelectInput\n        name=\"filter\"\n        label=\"\"\n        inputValue={selected}\n        errorMessage=\"\"\n        options={options}\n        onChange={handleSelectChange}\n      />\n    </form>\n  );\n});\n","import React, { memo } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport { FormSection } from '../Form/FormSection';\n\ninterface Props {\n  todos: Todo[],\n  id: number,\n  onSelect: (id: number) => void,\n  onFilter: (source: string, value: string) => void,\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos, id, onSelect, onFilter,\n}) => (\n  <div className=\"TodoList\">\n    <h2 className=\"title\">Todos:</h2>\n\n    <FormSection\n      onFilter={onFilter}\n    />\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            className={classNames(\n              'TodoList__item',\n              { 'TodoList__item--unchecked': !todo.completed },\n              { 'TodoList__item--checked': todo.completed },\n            )}\n            key={todo.id}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames(\n                'TodoList__user-button',\n                { 'TodoList__user-button--selected': todo.userId === id },\n              )}\n              type=\"button\"\n              onClick={() => onSelect(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n));\n","export function getTodos(): Promise<Todo[]> {\n  return fetch('https://mate.academy/students-api/todos')\n    .then(response => response.json());\n}\n\nexport const getUser = (userId: number): Promise<User> => {\n  return fetch(`https://mate.academy/students-api/users/${userId}`)\n    .then(response => response.json());\n};\n","import React, { memo, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  id: number,\n  onClearSelection: (id: number) => void\n}\n\nexport const CurrentUser: React.FC<Props> = memo(({ id, onClearSelection }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(id)\n      .then(person => setUser(person));\n  }, [id]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear\"\n        onClick={() => onClearSelection(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport 'bulma';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n\n  const filterTodos = useCallback((source: string, value: string) => {\n    setFilteredTodos(todos\n      .filter(todo => {\n        if (source === 'input') {\n          return todo.title.includes(value);\n        }\n\n        switch (value) {\n          case 'active':\n            return todo.completed === false;\n          case 'completed':\n            return todo.completed === true;\n          case 'all':\n          default:\n            return todo;\n        }\n      }));\n  }, [filteredTodos]);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setFilteredTodos([...todosFromServer]);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={filteredTodos}\n          id={selectedUserId}\n          onSelect={selectUser}\n          onFilter={filterTodos}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              id={selectedUserId}\n              onClearSelection={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}