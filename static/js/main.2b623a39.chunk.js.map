{"version":3,"sources":["components/InputComponents/TextInput.tsx","components/InputComponents/SelectInput.tsx","components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TextInput","memo","name","label","inputValue","errorMessage","placeholder","onChange","className","htmlFor","type","id","classNames","value","SelectInput","options","map","option","TodoList","todos","onSelect","onFilter","useState","title","setTitle","selected","setSelected","onSubmit","event","preventDefault","target","todo","readOnly","onClick","userId","CurrentUser","onClearSelection","user","setUser","useEffect","fetch","then","response","json","person","email","phone","App","selectedUserId","setSelectedUserId","setTodos","filteredTodos","setFilteredTodos","selectUser","todosFromServer","source","filter","includes","completed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b623a39.chunk.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\nimport 'bulma';\n\ninterface Props {\n  name: string,\n  label: string,\n  inputValue: string,\n  errorMessage: string,\n  placeholder: string,\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const TextInput: FC<Props> = memo(({\n  name, label, inputValue, errorMessage, placeholder, onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label htmlFor={name} className=\"label\">\n        {label}\n        <div className=\"control\">\n          <input\n            type=\"text\"\n            name={name}\n            id={name}\n            placeholder={placeholder}\n            className={classNames('input', { 'is-danger': errorMessage })}\n            value={inputValue}\n            onChange={onChange}\n          />\n        </div>\n      </label>\n      {errorMessage && (<p className=\"help is-danger\">{errorMessage}</p>)}\n    </div>\n  );\n});\n","import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\nimport 'bulma';\n\ninterface Option {\n  id: number,\n  name: string,\n}\n\ninterface Props {\n  name: string,\n  label: string,\n  inputValue: string,\n  errorMessage: string,\n  options: Option[],\n  onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\nexport const SelectInput: FC<Props> = memo(({\n  name, label, inputValue, errorMessage, options, onChange,\n}) => {\n  return (\n    <div className=\"field\">\n      <label htmlFor=\"todo\" className=\"label\">\n        {label}\n        <div className=\"control\">\n          <div className={classNames('select', { 'is-danger': errorMessage })}>\n            <select\n              id={name}\n              name={name}\n              value={inputValue}\n              onChange={onChange}\n            >\n              {options.map(option => (\n                <option key={option.id} value={option.name}>\n                  {option.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </label>\n      {errorMessage && (<p className=\"help is-danger\">{errorMessage}</p>)}\n    </div>\n  );\n});\n","import React, { memo, useState } from 'react';\nimport { TextInput } from '../InputComponents/TextInput';\nimport './TodoList.scss';\nimport 'bulma';\nimport { SelectInput } from '../InputComponents/SelectInput';\n\ninterface Props {\n  todos: Todo[],\n  onSelect: (id: number) => void,\n  onFilter: (source: string, value: string) => void,\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos, onSelect, onFilter,\n}) => {\n  const [title, setTitle] = useState('');\n  const [selected, setSelected] = useState('all');\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setSelected('all');\n    onFilter('input', event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelected(event.target.value);\n    setTitle('');\n    onFilter('select', event.target.value);\n  };\n\n  const options = [\n    { id: 1, name: 'all' },\n    { id: 2, name: 'active' },\n    { id: 3, name: 'completed' },\n  ];\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <form onSubmit={handleSubmit} className=\"TodoList__form\">\n        <TextInput\n          name=\"title\"\n          label=\"\"\n          inputValue={title}\n          errorMessage=\"\"\n          placeholder=\"Search by title\"\n          onChange={handleInputChange}\n        />\n\n        <SelectInput\n          name=\"filter\"\n          label=\"\"\n          inputValue={selected}\n          errorMessage=\"\"\n          options={options}\n          onChange={handleSelectChange}\n        />\n      </form>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              className=\"TodoList__item TodoList__item--unchecked\"\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => onSelect(todo.userId)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","const API_URL_TODOS = 'https://mate.academy/students-api/todos';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(API_URL_TODOS)\n    .then(response => response.json());\n}\n\nexport const getUser = (userId: number): Promise<User> => {\n  return fetch(`https://mate.academy/students-api/users/${userId}`)\n    .then(response => response.json());\n};\n","import React, { memo, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  id: number,\n  onClearSelection: (id: number) => void\n}\n\nexport const CurrentUser: React.FC<Props> = memo(({ id, onClearSelection }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(id)\n      .then(person => setUser(person));\n  }, [id]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear\"\n        onClick={() => onClearSelection(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n\n  const filterTodos = (source: string, value: string) => {\n    setFilteredTodos(todos\n      .filter(todo => {\n        if (source === 'input') {\n          return todo.title.includes(value);\n        }\n\n        switch (value) {\n          case 'active':\n            return todo.completed === false;\n          case 'completed':\n            return todo.completed === true;\n          case 'all':\n          default:\n            return todo;\n        }\n      }));\n  };\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setFilteredTodos([...todosFromServer]);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={filteredTodos}\n          onSelect={selectUser}\n          onFilter={filterTodos}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              id={selectedUserId}\n              onClearSelection={selectUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}